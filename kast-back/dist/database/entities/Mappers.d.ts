import User from '../../entities/User';
import DbUser from './User';
import Account from '../../entities/Account';
import Preferences from '../../entities/Preferences';
import Room from 'entities/Room';
import DbRoom from './Room';
import BookmarkDB from './Bookmark';
import Bookmark from 'entities/Bookmark';
import ParticipantDB from './Participant';
import Participant, { ParticipantMedia } from 'entities/Participant';
import AvikastFileDB from './AvikastFile';
import MessageDB from './Message';
import { AvikastFile } from 'entities/AvikastFile';
import Message from 'entities/Message';
import RecordDB from './Record';
import Record from 'entities/Record';
export declare const mapUserFromDb: (user: DbUser) => User;
export declare const mapUsersFromDB: (users: DbUser[]) => User[];
export declare const mapPreferencesFromDB: (user: DbUser) => Preferences;
export declare const mapAccountFromDB: (account: DbUser) => Account;
export declare const mapMessageFromDB: (message: MessageDB) => Message;
export declare const mapMessagesFromDB: (messages: MessageDB[]) => Message[];
export declare const mapRoomFromDB: (room: DbRoom) => Room;
export declare const mapRoomsFromDB: (rooms: DbRoom[]) => Room[];
export declare const mapBookmarkFromDB: (bookmark: BookmarkDB) => Bookmark;
export declare const mapBookmarksFromDB: (bookmarks: BookmarkDB[]) => Bookmark[];
export declare const mapParticipantFromDB: (participant: ParticipantDB) => Participant;
export declare const mapParticipantTrackFromDB: (participantMedia: ParticipantMedia) => ParticipantMedia;
export declare const mapParticipantsTracksFromDB: (participantMedia: ParticipantMedia[]) => ParticipantMedia[];
export declare const mapParticipantsFromDB: (participants: ParticipantDB[]) => Participant[];
export declare const mapAvikastFileFromDB: (avikastFile: AvikastFileDB) => AvikastFile;
export declare const mapAvikastFilesFromDB: (avikastFiles: AvikastFileDB[]) => AvikastFile[];
export declare const mapRecordFromDB: (record: RecordDB) => Record;
export declare const mapRecordsFromDb: (records: RecordDB[]) => Record[];
